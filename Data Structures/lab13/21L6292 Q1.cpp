#include<iostream>
#include<List>
#include<vector>
#include<stack>
using namespace std;
class Graph
{
	int v; // No. of vertices
	list<int>* adj; // adjacency lists
public:

	Graph(int n) // Constructor
	{
		v = n;

		adj = new list<int>[v];
	}
	void TakeInput(int vertex, int input)
	{
		adj[vertex].push_back(input);
	}
	void ExploreFunction(int start)
	{
		list<bool> visited(v, false);

	}
	void DFS(int vertex, vector<bool>& visited)// print the paths from start to every other vertex as generated by the DFS method.One path per line.
	{
		// stack for DFS 
		stack<int> val;
		val.push(vertex);

		while (val.empty() == false)
		{
			vertex = val.top();
			val.pop();
			if (visited[vertex] == false)
			{
				visited[vertex] = true;
				cout << vertex << "  ";
			}

			for (auto i = adj[vertex].begin(); i != adj[vertex].end(); ++i)
				if (visited[*i] == false) {
					val.push(*i);
				}
		}

	}
	void Print()
	{
		vector<bool> visited(v, false);

		for (int i = 0; i < v; i++)
			if (visited[i] == false)
				DFS(i, visited);
	}
	~Graph()
	{
		delete[] adj;
		adj = 0;
	}
};

int main()
{
	Graph g(4); // Total 4 vertices in graph
	g.TakeInput(0, 1);
	g.TakeInput(0, 2);
	g.TakeInput(1, 2);
	g.TakeInput(2, 0);
	g.TakeInput(2, 3);
	g.TakeInput(3, 3);
	g.Print();
}